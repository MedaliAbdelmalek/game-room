app.vue :

<template>
  <div :class="['app', isDark ? 'dark' : 'light']">
    <div class="animated-background" v-if="isDark"></div>
    <div class="header">
      <div class="logo-container">
        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/PlayStation_logo.svg/1280px-PlayStation_logo.svg.png" 
             alt="PlayStation Logo" 
             class="logo">
        <h1 class="title">Game Room <span class="highlight">PlayStation Stations</span></h1>
      </div>
      <div class="mode-toggle">
        <span class="mode-icon">{{ isDark ? 'üåô' : 'üåû' }}</span>
        <label class="switch">
          <input type="checkbox" v-model="isDark" />
          <span class="slider"></span>
        </label>
      </div>
    </div>
    <div class="cards">
      <PosteCard v-for="n in 7" :key="n" :posteNumber="n" />
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, watch, onMounted } from 'vue';
import PosteCard from './components/PosteCard.vue';

const isDark = ref(true);

// Persist dark mode preference
onMounted(() => {
  const saved = localStorage.getItem('isDark');
  if (saved !== null) {
    isDark.value = JSON.parse(saved);
  }
});

watch(isDark, (val) => {
  localStorage.setItem('isDark', JSON.stringify(val));
});
</script>

<style scoped>
@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@300;400;500;700&display=swap');

.app {
  min-height: 100vh;
  padding: 2rem;
  font-family: 'Roboto', sans-serif;
  transition: background-color 0.5s ease, color 0.5s ease;
  position: relative;
  overflow-x: hidden;
}

.animated-background {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
  opacity: 0.1;
  background: 
    radial-gradient(circle at 20% 30%, rgba(0, 234, 255, 0.3) 0%, transparent 20%),
    radial-gradient(circle at 80% 70%, rgba(0, 234, 255, 0.3) 0%, transparent 20%),
    radial-gradient(circle at 40% 60%, rgba(0, 234, 255, 0.3) 0%, transparent 20%);
  animation: floatBackground 20s infinite alternate ease-in-out;
}

@keyframes floatBackground {
  0% {
    transform: translate(0, 0);
  }
  25% {
    transform: translate(-5%, -2%);
  }
  50% {
    transform: translate(5%, 3%);
  }
  75% {
    transform: translate(-3%, 5%);
  }
  100% {
    transform: translate(4%, -3%);
  }
}

.dark {
  background: linear-gradient(135deg, #121212 0%, #1a1a2e 100%);
  color: #ffffff;
}

.light {
  background: linear-gradient(135deg, #f4f4f4 0%, #e6f7ff 100%);
  color: #111111;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  margin-bottom: 3rem;
  position: relative;
  z-index: 1;
}

.logo-container {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.logo {
  height: 50px;
  filter: drop-shadow(0 0 5px rgba(0, 234, 255, 0.7));
  transition: all 0.3s ease;
}

.logo:hover {
  transform: scale(1.05);
}

.title {
  font-size: 2.2rem;
  margin: 0.5rem 0;
  font-family: 'Orbitron', sans-serif;
  font-weight: 700;
  letter-spacing: 1px;
  background: linear-gradient(90deg, #00eaff, #0084ff);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  text-shadow: 0 0 10px rgba(0, 234, 255, 0.3);
}

.highlight {
  display: inline-block;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.7; }
  100% { opacity: 1; }
}

.cards {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 2rem;
  justify-content: center;
  position: relative;
  z-index: 1;
}

/* Toggle + emoji */
.mode-toggle {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: rgba(255, 255, 255, 0.1);
  padding: 0.5rem 1rem;
  border-radius: 50px;
  backdrop-filter: blur(5px);
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.mode-icon {
  font-size: 1.5rem;
  transition: transform 0.3s ease;
}

.mode-toggle:hover .mode-icon {
  transform: rotate(20deg);
}

/* Switch design */
.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 32px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  background-color: #555;
  border-radius: 34px;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  transition: 0.4s;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.3);
}

.slider:before {
  position: absolute;
  content: '';
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 3px;
  background: linear-gradient(145deg, #ffffff, #e6e6e6);
  border-radius: 50%;
  transition: 0.4s;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

input:checked + .slider {
  background: linear-gradient(145deg, #66bb6a, #4caf50);
}

input:checked + .slider:before {
  transform: translateX(26px);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .header {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }
  
  .logo-container {
    justify-content: center;
  }
  
  .title {
    font-size: 1.8rem;
  }
}

@media (max-width: 480px) {
  .app {
    padding: 1rem;
  }
  
  .title {
    font-size: 1.5rem;
  }
  
  .cards {
    grid-template-columns: 1fr;
  }
}
</style>


#######################
postecard:

<template>
  <div class="card" :class="{ 'ps5-highlight': posteNumber === 6 || posteNumber === 7 }">
    <div class="card-border"></div>
    
    <div class="card-header">
      <img v-if="posteNumber === 6 || posteNumber === 7" 
           :src="console === 'ps5' ? ps5Logo : ps4Logo" 
           alt="Console Logo" 
           class="console-logo">
      <h2 class="card-title">Poste {{ posteNumber }}</h2>
      <div class="controller-icon">üéÆ</div>
    </div>

    <!-- Select console only for Poste 6 and 7 -->
    <div v-if="posteNumber === 6 || posteNumber === 7" class="console-select">
      <label for="console">Console :</label>
      <div class="select-wrapper">
        <select id="console" v-model="console" @change="handleConsoleChange">
          <option value="ps4">PlayStation 4</option>
          <option value="ps5">PlayStation 5</option>
        </select>
        <div class="select-arrow">‚ñº</div>
      </div>
    </div>

    <div class="info">
      <div class="info-item">
        <div class="info-icon">‚è±</div>
        <div class="info-content">
          <p class="info-label">Temps</p>
          <p class="info-value">{{ formattedTime }}</p>
        </div>
      </div>
      
      <div class="info-item">
        <div class="info-icon">üí∞</div>
        <div class="info-content">
          <p class="info-label">Prix</p>
          <p class="info-value">{{ price.toFixed(2) }} TND</p>
        </div>
      </div>
    </div>

    <div class="buttons">
      <button class="btn start" @click="start" :disabled="isRunning">
        <span class="btn-text">Start</span>
        <span class="btn-icon">‚ñ∂Ô∏è</span>
      </button>
      <button class="btn stop" @click="stop" :disabled="!isRunning">
        <span class="btn-text">Stop</span>
        <span class="btn-icon">‚èπÔ∏è</span>
      </button>
      <button class="btn reset" @click="reset">
        <span class="btn-text">Reset</span>
        <span class="btn-icon">üîÑ</span>
      </button>
    </div>
    
    <div class="status-light" :class="{ active: isRunning }"></div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, onBeforeUnmount, watch } from 'vue';
import ps4Logo from '../assets/ps4-logo.png';
import ps5Logo from '../assets/ps5-logo.png';

const props = defineProps<{ posteNumber: number }>();

const storageKey = `poste-${props.posteNumber}`;
const seconds = ref(0);
const isRunning = ref(false);
const timer = ref<number | null>(null);
const console = ref<'ps4' | 'ps5'>('ps4');

// Compute price based on console type
const price = computed(() => {
  const hourlyRate = (props.posteNumber === 6 || props.posteNumber === 7)
    ? (console.value === 'ps5' ? 8 : 6)
    : 6;
  return (seconds.value / 3600) * hourlyRate;
});

// Format time
const formattedTime = computed(() => {
  const h = Math.floor(seconds.value / 3600);
  const m = Math.floor((seconds.value % 3600) / 60);
  const s = seconds.value % 60;
  return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
});

const start = () => {
  if (!isRunning.value) {
    isRunning.value = true;
    localStorage.setItem(storageKey, JSON.stringify({
      seconds: seconds.value,
      isRunning: true,
      lastStart: Date.now(),
      console: console.value,
    }));
    timer.value = setInterval(() => {
      seconds.value++;
    }, 1000);
  }
};

const stop = () => {
  if (isRunning.value) {
    isRunning.value = false;
    clearInterval(timer.value!);
    timer.value = null;
    localStorage.setItem(storageKey, JSON.stringify({
      seconds: seconds.value,
      isRunning: false,
      console: console.value,
    }));
  }
};

const reset = () => {
  stop();
  seconds.value = 0;
  localStorage.removeItem(storageKey);
};

const handleConsoleChange = () => {
  if (isRunning.value) {
    localStorage.setItem(storageKey, JSON.stringify({
      seconds: seconds.value,
      isRunning: true,
      lastStart: Date.now(),
      console: console.value,
    }));
  }
};

onMounted(() => {
  const data = localStorage.getItem(storageKey);
  if (data) {
    try {
      const { seconds: savedSec, isRunning: wasRunning, lastStart, console: savedConsole } = JSON.parse(data);
      seconds.value = savedSec || 0;
      if (savedConsole) console.value = savedConsole;
      if (wasRunning && lastStart) {
        const elapsed = Math.floor((Date.now() - lastStart) / 1000);
        seconds.value += elapsed;
        start();
      }
    } catch (e) {
      console.error('Failed to load timer:', e);
    }
  }
});

watch([seconds, console], () => {
  if (isRunning.value) {
    localStorage.setItem(storageKey, JSON.stringify({
      seconds: seconds.value,
      isRunning: true,
      lastStart: Date.now(),
      console: console.value,
    }));
  }
});

onBeforeUnmount(() => {
  if (timer.value) clearInterval(timer.value);
});
</script>

<style scoped>
@keyframes float {
  0% { transform: translateY(0px); }
  50% { transform: translateY(-5px); }
  100% { transform: translateY(0px); }
}

@keyframes pulse-glow {
  0% { box-shadow: 0 0 5px rgba(0, 234, 255, 0.5); }
  50% { box-shadow: 0 0 20px rgba(0, 234, 255, 0.8); }
  100% { box-shadow: 0 0 5px rgba(0, 234, 255, 0.5); }
}

@keyframes border-glow {
  0% { border-color: rgba(0, 234, 255, 0.3); }
  50% { border-color: rgba(0, 234, 255, 0.8); }
  100% { border-color: rgba(0, 234, 255, 0.3); }
}

.card {
  width: 100%;
  min-height: 320px;
  border-radius: 16px;
  padding: 1.5rem;
  text-align: center;
  background: var(--bg-card);
  box-shadow: var(--box-shadow);
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
  border: 1px solid rgba(0, 234, 255, 0.2);
  animation: border-glow 4s infinite;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: var(--box-shadow-hover);
}

.card-border {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border: 2px solid transparent;
  border-radius: 16px;
  pointer-events: none;
  animation: border-glow 4s infinite;
}

.ps5-highlight {
  position: relative;
}

.ps5-highlight::before {
  content: 'PREMIUM';
  position: absolute;
  top: 10px;
  right: -25px;
  background: linear-gradient(90deg, #ff6b00, #ffa502);
  color: white;
  padding: 3px 30px;
  font-size: 0.8rem;
  font-weight: bold;
  transform: rotate(45deg);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  z-index: 2;
}

.card-header {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-bottom: 1.5rem;
  position: relative;
}

.console-logo {
  height: 30px;
  object-fit: contain;
}

.card-title {
  font-size: 1.5rem;
  margin: 0;
  color: var(--accent);
  font-family: 'Orbitron', sans-serif;
  letter-spacing: 1px;
  text-shadow: 0 0 5px rgba(0, 234, 255, 0.3);
}

.controller-icon {
  font-size: 1.2rem;
  animation: float 3s ease-in-out infinite;
}

.info {
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
  margin: 1.5rem 0;
}

.info-item {
  display: flex;
  align-items: center;
  gap: 0.8rem;
  background: var(--info-bg);
  padding: 0.8rem;
  border-radius: 10px;
  text-align: left;
}

.info-icon {
  font-size: 1.5rem;
  flex-shrink: 0;
}

.info-content {
  flex-grow: 1;
}

.info-label {
  margin: 0;
  font-size: 0.9rem;
  color: var(--text-secondary);
}

.info-value {
  margin: 0;
  font-size: 1.2rem;
  font-weight: bold;
  color: var(--accent);
}

/* Select console */
.console-select {
  margin-bottom: 1.5rem;
  text-align: left;
}

.console-select label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: bold;
  color: var(--text-secondary);
  font-size: 0.9rem;
}

.select-wrapper {
  position: relative;
}

.select-wrapper select {
  width: 100%;
  padding: 0.6rem 1rem;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  background: var(--select-bg);
  color: var(--text-primary);
  font-size: 1rem;
  appearance: none;
  cursor: pointer;
  transition: all 0.3s ease;
}

.select-wrapper select:focus {
  outline: none;
  border-color: var(--accent);
  box-shadow: 0 0 0 2px rgba(0, 234, 255, 0.2);
}

.select-arrow {
  position: absolute;
  top: 50%;
  right: 1rem;
  transform: translateY(-50%);
  pointer-events: none;
  color: var(--text-secondary);
}

.buttons {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 0.8rem;
  margin-top: 1.5rem;
}

.btn {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 0.8rem;
  border: none;
  border-radius: 10px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.btn::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
  opacity: 0;
  transition: opacity 0.3s ease;
}

.btn:hover::after {
  opacity: 1;
}

.btn-text {
  font-size: 0.9rem;
}

.btn-icon {
  font-size: 1.2rem;
  margin-top: 0.3rem;
}

.start {
  background: linear-gradient(135deg, #00c853, #00e676);
  color: white;
}

.stop {
  background: linear-gradient(135deg, #d50000, #ff1744);
  color: white;
}

.reset {
  background: linear-gradient(135deg, #2962ff, #448aff);
  color: white;
}

.btn:disabled {
  background: var(--btn-disabled);
  cursor: not-allowed;
  opacity: 0.7;
}

.status-light {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background-color: #ff3d00;
  opacity: 0.3;
  transition: all 0.3s ease;
}

.status-light.active {
  opacity: 1;
  box-shadow: 0 0 10px #ff3d00;
  animation: pulse-glow 1.5s infinite;
}

/* Theme variables */
:root {
  --accent: #00eaff;
  --bg-card: rgba(28, 28, 28, 0.8);
  --box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
  --box-shadow-hover: 0 15px 30px rgba(0, 234, 255, 0.2);
  --info-bg: rgba(40, 40, 40, 0.6);
  --text-secondary: #aaaaaa;
  --border-color: rgba(0, 234, 255, 0.3);
  --select-bg: rgba(50, 50, 50, 0.5);
  --btn-disabled: #555555;
}

.light :root {
  --accent: #005688;
  --bg-card: rgba(255, 255, 255, 0.9);
  --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  --box-shadow-hover: 0 10px 25px rgba(0, 86, 136, 0.15);
  --info-bg: rgba(240, 240, 240, 0.8);
  --text-secondary: #666666;
  --border-color: rgba(0, 86, 136, 0.3);
  --select-bg: rgba(240, 240, 240, 0.8);
  --btn-disabled: #cccccc;
}

@media (max-width: 768px) {
  .card {
    min-height: 300px;
  }
  
  .buttons {
    grid-template-columns: 1fr;
  }
}
</style>